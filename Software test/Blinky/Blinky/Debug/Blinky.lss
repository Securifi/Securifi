
Blinky.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009ae  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000721  00000000  00000000  00000c96  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000041b  00000000  00000000  000013b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  000017d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000416  00000000  00000000  00001878  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002f8  00000000  00000000  00001c8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001f86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 dd 00 	call	0x1ba	; 0x1ba <main>
  78:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ch_delay>:
#define DELAY2 5
#define DELAY3 7
#define DELAY4 10

void ch_delay(unsigned char n_delay){
	switch (n_delay)
  80:	85 30       	cpi	r24, 0x05	; 5
  82:	99 f0       	breq	.+38     	; 0xaa <ch_delay+0x2a>
  84:	18 f4       	brcc	.+6      	; 0x8c <ch_delay+0xc>
  86:	82 30       	cpi	r24, 0x02	; 2
  88:	31 f0       	breq	.+12     	; 0x96 <ch_delay+0x16>
  8a:	08 95       	ret
  8c:	87 30       	cpi	r24, 0x07	; 7
  8e:	b9 f0       	breq	.+46     	; 0xbe <ch_delay+0x3e>
  90:	8a 30       	cpi	r24, 0x0A	; 10
  92:	f9 f0       	breq	.+62     	; 0xd2 <ch_delay+0x52>
  94:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	2f ef       	ldi	r18, 0xFF	; 255
  98:	83 ec       	ldi	r24, 0xC3	; 195
  9a:	99 e0       	ldi	r25, 0x09	; 9
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	80 40       	sbci	r24, 0x00	; 0
  a0:	90 40       	sbci	r25, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <ch_delay+0x1c>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <ch_delay+0x26>
  a6:	00 00       	nop
  a8:	08 95       	ret
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	89 e6       	ldi	r24, 0x69	; 105
  ae:	98 e1       	ldi	r25, 0x18	; 24
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <ch_delay+0x30>
  b8:	00 c0       	rjmp	.+0      	; 0xba <ch_delay+0x3a>
  ba:	00 00       	nop
  bc:	08 95       	ret
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	8d e2       	ldi	r24, 0x2D	; 45
  c2:	92 e2       	ldi	r25, 0x22	; 34
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <ch_delay+0x44>
  cc:	00 c0       	rjmp	.+0      	; 0xce <ch_delay+0x4e>
  ce:	00 00       	nop
  d0:	08 95       	ret
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	83 ed       	ldi	r24, 0xD3	; 211
  d6:	90 e3       	ldi	r25, 0x30	; 48
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <ch_delay+0x58>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <ch_delay+0x62>
  e2:	00 00       	nop
  e4:	08 95       	ret

000000e6 <init_ports_mcu>:
		break;
	}
}

void init_ports_mcu(){
	DDRB=0xFFu;
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	84 b9       	out	0x04, r24	; 4
	PORTB=0x00u;
  ea:	15 b8       	out	0x05, r1	; 5
	
	DDRC=0xFFu;
  ec:	87 b9       	out	0x07, r24	; 7
	PORTC=0x00u;
  ee:	18 b8       	out	0x08, r1	; 8
	
	DDRD=0xFFu;
  f0:	8a b9       	out	0x0a, r24	; 10
	PORTD=0x00u;
  f2:	1b b8       	out	0x0b, r1	; 11
  f4:	08 95       	ret

000000f6 <serial_mode_leds>:
	
}

void serial_mode_leds(unsigned char number_repeat, unsigned char ms_delay){
  f6:	ef 92       	push	r14
  f8:	ff 92       	push	r15
  fa:	0f 93       	push	r16
  fc:	1f 93       	push	r17
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
	for (unsigned char i=0;i < number_repeat; i++)
 102:	88 23       	and	r24, r24
 104:	61 f1       	breq	.+88     	; 0x15e <serial_mode_leds+0x68>
 106:	c6 2f       	mov	r28, r22
 108:	08 2f       	mov	r16, r24
 10a:	d0 e0       	ldi	r29, 0x00	; 0
	{
		PORTB = (1 << LED1);
 10c:	ee 24       	eor	r14, r14
 10e:	e3 94       	inc	r14
		ch_delay(ms_delay);
		PORTB &= ~(1 << LED1);
		ch_delay(ms_delay);
		
		PORTC = (1 << LED2);
 110:	12 e0       	ldi	r17, 0x02	; 2
		ch_delay(ms_delay);
		PORTC &= ~(1 << LED2);
		ch_delay(ms_delay);
		
		PORTD = (1 << LED3);
 112:	68 94       	set
 114:	ff 24       	eor	r15, r15
 116:	f2 f8       	bld	r15, 2
}

void serial_mode_leds(unsigned char number_repeat, unsigned char ms_delay){
	for (unsigned char i=0;i < number_repeat; i++)
	{
		PORTB = (1 << LED1);
 118:	e5 b8       	out	0x05, r14	; 5
		ch_delay(ms_delay);
 11a:	8c 2f       	mov	r24, r28
 11c:	0e 94 40 00 	call	0x80	; 0x80 <ch_delay>
		PORTB &= ~(1 << LED1);
 120:	28 98       	cbi	0x05, 0	; 5
		ch_delay(ms_delay);
 122:	8c 2f       	mov	r24, r28
 124:	0e 94 40 00 	call	0x80	; 0x80 <ch_delay>
		
		PORTC = (1 << LED2);
 128:	18 b9       	out	0x08, r17	; 8
		ch_delay(ms_delay);
 12a:	8c 2f       	mov	r24, r28
 12c:	0e 94 40 00 	call	0x80	; 0x80 <ch_delay>
		PORTC &= ~(1 << LED2);
 130:	41 98       	cbi	0x08, 1	; 8
		ch_delay(ms_delay);
 132:	8c 2f       	mov	r24, r28
 134:	0e 94 40 00 	call	0x80	; 0x80 <ch_delay>
		
		PORTD = (1 << LED3);
 138:	fb b8       	out	0x0b, r15	; 11
		ch_delay(ms_delay);
 13a:	8c 2f       	mov	r24, r28
 13c:	0e 94 40 00 	call	0x80	; 0x80 <ch_delay>
		PORTD &= ~(1 << LED3);
 140:	5a 98       	cbi	0x0b, 2	; 11
		ch_delay(ms_delay);
 142:	8c 2f       	mov	r24, r28
 144:	0e 94 40 00 	call	0x80	; 0x80 <ch_delay>
		
		PORTC = (1 << LED2);
 148:	18 b9       	out	0x08, r17	; 8
		ch_delay(ms_delay);
 14a:	8c 2f       	mov	r24, r28
 14c:	0e 94 40 00 	call	0x80	; 0x80 <ch_delay>
		PORTC &= ~(1 << LED2);
 150:	41 98       	cbi	0x08, 1	; 8
		ch_delay(ms_delay);
 152:	8c 2f       	mov	r24, r28
 154:	0e 94 40 00 	call	0x80	; 0x80 <ch_delay>
	PORTD=0x00u;
	
}

void serial_mode_leds(unsigned char number_repeat, unsigned char ms_delay){
	for (unsigned char i=0;i < number_repeat; i++)
 158:	df 5f       	subi	r29, 0xFF	; 255
 15a:	0d 13       	cpse	r16, r29
 15c:	dd cf       	rjmp	.-70     	; 0x118 <serial_mode_leds+0x22>
		ch_delay(ms_delay);
		PORTC &= ~(1 << LED2);
		ch_delay(ms_delay);
				
	}
}
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	1f 91       	pop	r17
 164:	0f 91       	pop	r16
 166:	ff 90       	pop	r15
 168:	ef 90       	pop	r14
 16a:	08 95       	ret

0000016c <parallel_mode_leds>:

void parallel_mode_leds(unsigned char number_repeat, unsigned char ms_delay)
{
 16c:	ef 92       	push	r14
 16e:	ff 92       	push	r15
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
	for (unsigned char i=0;i < number_repeat; i++)
 178:	88 23       	and	r24, r24
 17a:	c1 f0       	breq	.+48     	; 0x1ac <parallel_mode_leds+0x40>
 17c:	d6 2f       	mov	r29, r22
 17e:	18 2f       	mov	r17, r24
 180:	c0 e0       	ldi	r28, 0x00	; 0
	{
		PORTB = (1 << LED1);
 182:	ee 24       	eor	r14, r14
 184:	e3 94       	inc	r14
		PORTC = (1 << LED2);
 186:	68 94       	set
 188:	ff 24       	eor	r15, r15
 18a:	f1 f8       	bld	r15, 1
		PORTD = (1 << LED3);
 18c:	04 e0       	ldi	r16, 0x04	; 4

void parallel_mode_leds(unsigned char number_repeat, unsigned char ms_delay)
{
	for (unsigned char i=0;i < number_repeat; i++)
	{
		PORTB = (1 << LED1);
 18e:	e5 b8       	out	0x05, r14	; 5
		PORTC = (1 << LED2);
 190:	f8 b8       	out	0x08, r15	; 8
		PORTD = (1 << LED3);
 192:	0b b9       	out	0x0b, r16	; 11
		ch_delay(ms_delay);
 194:	8d 2f       	mov	r24, r29
 196:	0e 94 40 00 	call	0x80	; 0x80 <ch_delay>
		
		PORTB &= ~(1 << LED1);
 19a:	28 98       	cbi	0x05, 0	; 5
		PORTC &= ~(1 << LED2);
 19c:	41 98       	cbi	0x08, 1	; 8
		PORTD &= ~(1 << LED3);
 19e:	5a 98       	cbi	0x0b, 2	; 11
		ch_delay(ms_delay);
 1a0:	8d 2f       	mov	r24, r29
 1a2:	0e 94 40 00 	call	0x80	; 0x80 <ch_delay>
	}
}

void parallel_mode_leds(unsigned char number_repeat, unsigned char ms_delay)
{
	for (unsigned char i=0;i < number_repeat; i++)
 1a6:	cf 5f       	subi	r28, 0xFF	; 255
 1a8:	1c 13       	cpse	r17, r28
 1aa:	f1 cf       	rjmp	.-30     	; 0x18e <parallel_mode_leds+0x22>
		PORTC &= ~(1 << LED2);
		PORTD &= ~(1 << LED3);
		ch_delay(ms_delay);
		
	}
}
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	0f 91       	pop	r16
 1b4:	ff 90       	pop	r15
 1b6:	ef 90       	pop	r14
 1b8:	08 95       	ret

000001ba <main>:
{
	
    /* Replace with your application code */
    while (1) 
    {
		init_ports_mcu();
 1ba:	0e 94 73 00 	call	0xe6	; 0xe6 <init_ports_mcu>
		
		serial_mode_leds(NUMBER_OF_REPEAT,DELAY1);
 1be:	62 e0       	ldi	r22, 0x02	; 2
 1c0:	83 e0       	ldi	r24, 0x03	; 3
 1c2:	0e 94 7b 00 	call	0xf6	; 0xf6 <serial_mode_leds>
		serial_mode_leds(NUMBER_OF_REPEAT,DELAY2);
 1c6:	65 e0       	ldi	r22, 0x05	; 5
 1c8:	83 e0       	ldi	r24, 0x03	; 3
 1ca:	0e 94 7b 00 	call	0xf6	; 0xf6 <serial_mode_leds>
		parallel_mode_leds(NUMBER_OF_REPEAT,DELAY1);
 1ce:	62 e0       	ldi	r22, 0x02	; 2
 1d0:	83 e0       	ldi	r24, 0x03	; 3
 1d2:	0e 94 b6 00 	call	0x16c	; 0x16c <parallel_mode_leds>
		parallel_mode_leds(NUMBER_OF_REPEAT,DELAY2);
 1d6:	65 e0       	ldi	r22, 0x05	; 5
 1d8:	83 e0       	ldi	r24, 0x03	; 3
 1da:	0e 94 b6 00 	call	0x16c	; 0x16c <parallel_mode_leds>
 1de:	ed cf       	rjmp	.-38     	; 0x1ba <main>

000001e0 <_exit>:
 1e0:	f8 94       	cli

000001e2 <__stop_program>:
 1e2:	ff cf       	rjmp	.-2      	; 0x1e2 <__stop_program>
